// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Coinche/Protocol/communication.proto
#pragma warning disable 1591, 0612, 3021

#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;

namespace CardGame.Protocol
{
    /// <summary>Holder for reflection information generated from Coinche/Protocol/communication.proto</summary>
    public static partial class CommunicationReflection
    {
        #region Descriptor

        /// <summary>File descriptor for Coinche/Protocol/communication.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }

        private static pbr::FileDescriptor descriptor;

        static CommunicationReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "CjJzcmMvbWFpbi9qYXZhL0NvaW5jaGUvUHJvdG9jb2wvY29tbXVuaWNhdGlv",
                  "bi5wcm90bxIQQ29pbmNoZS5Qcm90b2NvbCKaAgoHTWVzc2FnZRIsCgR0eXBl",
                  "GAEgASgOMh4uQ29pbmNoZS5Qcm90b2NvbC5NZXNzYWdlLlR5cGUSJAoEaGFu",
                  "ZBgCIAEoCzIWLkNvaW5jaGUuUHJvdG9jb2wuSGFuZBImCgVldmVudBgDIAEo",
                  "CzIXLkNvaW5jaGUuUHJvdG9jb2wuRXZlbnQSKAoGcHJvbXB0GAQgASgLMhgu",
                  "Q29pbmNoZS5Qcm90b2NvbC5Qcm9tcHQSJgoFcmVwbHkYBSABKAsyFy5Db2lu",
                  "Y2hlLlByb3RvY29sLlJlcGx5IkEKBFR5cGUSDQoJVU5ERUZJTkVEEAASCAoE",
                  "SEFORBABEgkKBUVWRU5UEAISCgoGUFJPTVBUEAMSCQoFUkVQTFkQBCKRAgoE",
                  "Q2FyZBIpCgR0eXBlGAEgASgOMhsuQ29pbmNoZS5Qcm90b2NvbC5DYXJkLlR5",
                  "cGUSKwoFdmFsdWUYAiABKA4yHC5Db2luY2hlLlByb3RvY29sLkNhcmQuVmFs",
                  "dWUiRwoEVHlwZRIOCgpVTkRFRklORURUEAASDAoIRElBTU9ORFMQARIKCgZI",
                  "RUFSVFMQAhIJCgVDTFVCUxADEgoKBlNQQURFUxAEImgKBVZhbHVlEg4KClVO",
                  "REVGSU5FRFYQABIHCgNBQ0UQARIICgRLSU5HEAISCQoFUVVFRU4QAxIICgRK",
                  "QUNLEAQSBwoDVEVOEAUSCAoETklORRAGEgkKBUVJR0hUEAcSCQoFU0VWRU4Q",
                  "CCKmAQoIQW5ub3VuY2USLQoEdHlwZRgBIAEoDjIfLkNvaW5jaGUuUHJvdG9j",
                  "b2wuQW5ub3VuY2UuVHlwZRIkCgRjYXJkGAIgASgLMhYuQ29pbmNoZS5Qcm90",
                  "b2NvbC5DYXJkIkUKBFR5cGUSDQoJVU5ERUZJTkVEEAASCQoFQ0FSUkUQARII",
                  "CgRDRU5UEAISDQoJQ0lOUVVBTlRFEAMSCgoGVElFUkNFEAQiLAoESGFuZBIk",
                  "CgRjYXJkGAEgAygLMhYuQ29pbmNoZS5Qcm90b2NvbC5DYXJkIqABCghDb250",
                  "cmFjdBINCgVzY29yZRgBIAEoDRItCgR0eXBlGAIgASgOMh8uQ29pbmNoZS5Q",
                  "cm90b2NvbC5Db250cmFjdC5UeXBlIlYKBFR5cGUSDQoJVU5ERUZJTkVEEAAS",
                  "DAoIRElBTU9ORFMQARIKCgZIRUFSVFMQAhIJCgVDTFVCUxADEgoKBlNQQURF",
                  "UxAEEgYKAkFBEAUSBgoCTkEQBiLuAgoFRXZlbnQSKgoEdHlwZRgBIAEoDjIc",
                  "LkNvaW5jaGUuUHJvdG9jb2wuRXZlbnQuVHlwZRIkCgRjYXJkGAIgASgLMhYu",
                  "Q29pbmNoZS5Qcm90b2NvbC5DYXJkEiwKCGNvbnRyYWN0GAMgASgLMhouQ29p",
                  "bmNoZS5Qcm90b2NvbC5Db250cmFjdBIsCghhbm5vdW5jZRgEIAEoCzIaLkNv",
                  "aW5jaGUuUHJvdG9jb2wuQW5ub3VuY2USEAoIYXJndW1lbnQYBSADKAkipAEK",
                  "BFR5cGUSDQoJVU5ERUZJTkVEEAASCAoETkFNRRABEggKBEhBTkQQAhIICgRR",
                  "VUlUEAMSDAoIQ09OVFJBQ1QQBBIICgRQQVNTEAUSCwoHQ09JTkNIRRAGEg4K",
                  "ClNVUkNPSU5DSEUQBxIICgRQTEFZEAgSCAoETEFTVBAJEgwKCEFOTk9VTkNF",
                  "EAoSCgoGQkVMT1RFEAsSDAoIUkVCRUxPVEUQDCIcCgZQcm9tcHQSEgoKdG9f",
                  "ZGlzcGxheRgBIAMoCSIoCgVSZXBseRIOCgZudW1iZXIYASABKA0SDwoHbWVz",
                  "c2FnZRgCIAEoCUITqgIQQ29pbmNoZS5Qcm90b2NvbGIGcHJvdG8z"));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CardGame.Protocol.Message), global::CardGame.Protocol.Message.Parser, new[]{ "Type", "Hand", "Event", "Prompt", "Reply" }, null, new[]{ typeof(global::CardGame.Protocol.Message.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CardGame.Protocol.Card), global::CardGame.Protocol.Card.Parser, new[]{ "Type", "Value" }, null, new[]{ typeof(global::CardGame.Protocol.Card.Types.Type), typeof(global::CardGame.Protocol.Card.Types.Value) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CardGame.Protocol.Announce), global::CardGame.Protocol.Announce.Parser, new[]{ "Type", "Card" }, null, new[]{ typeof(global::CardGame.Protocol.Announce.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CardGame.Protocol.Hand), global::CardGame.Protocol.Hand.Parser, new[]{ "Card" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CardGame.Protocol.Contract), global::CardGame.Protocol.Contract.Parser, new[]{ "Score", "Type" }, null, new[]{ typeof(global::CardGame.Protocol.Contract.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CardGame.Protocol.Event), global::CardGame.Protocol.Event.Parser, new[]{ "Type", "Card", "Contract", "Announce", "Argument" }, null, new[]{ typeof(global::CardGame.Protocol.Event.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CardGame.Protocol.Prompt), global::CardGame.Protocol.Prompt.Parser, new[]{ "ToDisplay" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CardGame.Protocol.Reply), global::CardGame.Protocol.Reply.Parser, new[]{ "Number", "Message" }, null, null, null)
                }));
        }

        #endregion Descriptor
    }

    #region Messages

    public sealed partial class Message : pb::IMessage<Message>
    {
        private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Message> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::CardGame.Protocol.CommunicationReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Message()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Message(Message other) : this()
        {
            type_ = other.type_;
            Hand = other.hand_ != null ? other.Hand.Clone() : null;
            Event = other.event_ != null ? other.Event.Clone() : null;
            Prompt = other.prompt_ != null ? other.Prompt.Clone() : null;
            Reply = other.reply_ != null ? other.Reply.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Message Clone()
        {
            return new Message(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;

        private global::CardGame.Protocol.Message.Types.Type type_ = 0;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::CardGame.Protocol.Message.Types.Type Type
        {
            get { return type_; }
            set
            {
                type_ = value;
            }
        }

        /// <summary>Field number for the "hand" field.</summary>
        public const int HandFieldNumber = 2;

        private global::CardGame.Protocol.Hand hand_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::CardGame.Protocol.Hand Hand
        {
            get { return hand_; }
            set
            {
                hand_ = value;
            }
        }

        /// <summary>Field number for the "event" field.</summary>
        public const int EventFieldNumber = 3;

        private global::CardGame.Protocol.Event event_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::CardGame.Protocol.Event Event
        {
            get { return event_; }
            set
            {
                event_ = value;
            }
        }

        /// <summary>Field number for the "prompt" field.</summary>
        public const int PromptFieldNumber = 4;

        private global::CardGame.Protocol.Prompt prompt_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::CardGame.Protocol.Prompt Prompt
        {
            get { return prompt_; }
            set
            {
                prompt_ = value;
            }
        }

        /// <summary>Field number for the "reply" field.</summary>
        public const int ReplyFieldNumber = 5;

        private global::CardGame.Protocol.Reply reply_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::CardGame.Protocol.Reply Reply
        {
            get { return reply_; }
            set
            {
                reply_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Message);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Message other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Type != other.Type) return false;
            if (!object.Equals(Hand, other.Hand)) return false;
            if (!object.Equals(Event, other.Event)) return false;
            if (!object.Equals(Prompt, other.Prompt)) return false;
            if (!object.Equals(Reply, other.Reply)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Type != 0) hash ^= Type.GetHashCode();
            if (hand_ != null) hash ^= Hand.GetHashCode();
            if (event_ != null) hash ^= Event.GetHashCode();
            if (prompt_ != null) hash ^= Prompt.GetHashCode();
            if (reply_ != null) hash ^= Reply.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Type != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Type);
            }
            if (hand_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Hand);
            }
            if (event_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Event);
            }
            if (prompt_ != null)
            {
                output.WriteRawTag(34);
                output.WriteMessage(Prompt);
            }
            if (reply_ != null)
            {
                output.WriteRawTag(42);
                output.WriteMessage(Reply);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Type != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (hand_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hand);
            }
            if (event_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Event);
            }
            if (prompt_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prompt);
            }
            if (reply_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reply);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Message other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Type != 0)
            {
                Type = other.Type;
            }
            if (other.hand_ != null)
            {
                if (hand_ == null)
                {
                    hand_ = new global::CardGame.Protocol.Hand();
                }
                Hand.MergeFrom(other.Hand);
            }
            if (other.event_ != null)
            {
                if (event_ == null)
                {
                    event_ = new global::CardGame.Protocol.Event();
                }
                Event.MergeFrom(other.Event);
            }
            if (other.prompt_ != null)
            {
                if (prompt_ == null)
                {
                    prompt_ = new global::CardGame.Protocol.Prompt();
                }
                Prompt.MergeFrom(other.Prompt);
            }
            if (other.reply_ != null)
            {
                if (reply_ == null)
                {
                    reply_ = new global::CardGame.Protocol.Reply();
                }
                Reply.MergeFrom(other.Reply);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;

                    case 8:
                        {
                            type_ = (global::CardGame.Protocol.Message.Types.Type)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            if (hand_ == null)
                            {
                                hand_ = new global::CardGame.Protocol.Hand();
                            }
                            input.ReadMessage(hand_);
                            break;
                        }
                    case 26:
                        {
                            if (event_ == null)
                            {
                                event_ = new global::CardGame.Protocol.Event();
                            }
                            input.ReadMessage(event_);
                            break;
                        }
                    case 34:
                        {
                            if (prompt_ == null)
                            {
                                prompt_ = new global::CardGame.Protocol.Prompt();
                            }
                            input.ReadMessage(prompt_);
                            break;
                        }
                    case 42:
                        {
                            if (reply_ == null)
                            {
                                reply_ = new global::CardGame.Protocol.Reply();
                            }
                            input.ReadMessage(reply_);
                            break;
                        }
                }
            }
        }

        #region Nested types

        /// <summary>Container for nested types declared in the Message message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum Type
            {
                [pbr::OriginalName("UNDEFINED")] Undefined = 0,
                [pbr::OriginalName("HAND")] Hand = 1,
                [pbr::OriginalName("EVENT")] Event = 2,
                [pbr::OriginalName("PROMPT")] Prompt = 3,
                [pbr::OriginalName("REPLY")] Reply = 4,
            }
        }

        #endregion Nested types
    }

    public sealed partial class Card : pb::IMessage<Card>
    {
        private static readonly pb::MessageParser<Card> _parser = new pb::MessageParser<Card>(() => new Card());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Card> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::CardGame.Protocol.CommunicationReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Card()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Card(Card other) : this()
        {
            type_ = other.type_;
            value_ = other.value_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Card Clone()
        {
            return new Card(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;

        private global::CardGame.Protocol.Card.Types.Type type_ = 0;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::CardGame.Protocol.Card.Types.Type Type
        {
            get { return type_; }
            set
            {
                type_ = value;
            }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;

        private global::CardGame.Protocol.Card.Types.Value value_ = 0;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::CardGame.Protocol.Card.Types.Value Value
        {
            get { return value_; }
            set
            {
                value_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Card);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Card other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Type != other.Type) return false;
            if (Value != other.Value) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Type != 0) hash ^= Type.GetHashCode();
            if (Value != 0) hash ^= Value.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Type != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Type);
            }
            if (Value != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)Value);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Type != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (Value != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Value);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Card other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Type != 0)
            {
                Type = other.Type;
            }
            if (other.Value != 0)
            {
                Value = other.Value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;

                    case 8:
                        {
                            type_ = (global::CardGame.Protocol.Card.Types.Type)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            value_ = (global::CardGame.Protocol.Card.Types.Value)input.ReadEnum();
                            break;
                        }
                }
            }
        }

        #region Nested types

        /// <summary>Container for nested types declared in the Card message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum Type
            {
                [pbr::OriginalName("UNDEFINEDT")] Undefinedt = 0,
                [pbr::OriginalName("DIAMONDS")] Diamonds = 1,
                [pbr::OriginalName("HEARTS")] Hearts = 2,
                [pbr::OriginalName("CLUBS")] Clubs = 3,
                [pbr::OriginalName("SPADES")] Spades = 4,
            }

            public enum Value
            {
                [pbr::OriginalName("UNDEFINEDV")] Undefinedv = 0,
                [pbr::OriginalName("ACE")] Ace = 1,
                [pbr::OriginalName("KING")] King = 2,
                [pbr::OriginalName("QUEEN")] Queen = 3,
                [pbr::OriginalName("JACK")] Jack = 4,
                [pbr::OriginalName("TEN")] Ten = 5,
                [pbr::OriginalName("NINE")] Nine = 6,
                [pbr::OriginalName("EIGHT")] Eight = 7,
                [pbr::OriginalName("SEVEN")] Seven = 8,
            }
        }

        #endregion Nested types
    }

    public sealed partial class Announce : pb::IMessage<Announce>
    {
        private static readonly pb::MessageParser<Announce> _parser = new pb::MessageParser<Announce>(() => new Announce());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Announce> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::CardGame.Protocol.CommunicationReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Announce()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Announce(Announce other) : this()
        {
            type_ = other.type_;
            Card = other.card_ != null ? other.Card.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Announce Clone()
        {
            return new Announce(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;

        private global::CardGame.Protocol.Announce.Types.Type type_ = 0;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::CardGame.Protocol.Announce.Types.Type Type
        {
            get { return type_; }
            set
            {
                type_ = value;
            }
        }

        /// <summary>Field number for the "card" field.</summary>
        public const int CardFieldNumber = 2;

        private global::CardGame.Protocol.Card card_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::CardGame.Protocol.Card Card
        {
            get { return card_; }
            set
            {
                card_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Announce);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Announce other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Type != other.Type) return false;
            if (!object.Equals(Card, other.Card)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Type != 0) hash ^= Type.GetHashCode();
            if (card_ != null) hash ^= Card.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Type != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Type);
            }
            if (card_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Card);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Type != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (card_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Announce other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Type != 0)
            {
                Type = other.Type;
            }
            if (other.card_ != null)
            {
                if (card_ == null)
                {
                    card_ = new global::CardGame.Protocol.Card();
                }
                Card.MergeFrom(other.Card);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;

                    case 8:
                        {
                            type_ = (global::CardGame.Protocol.Announce.Types.Type)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            if (card_ == null)
                            {
                                card_ = new global::CardGame.Protocol.Card();
                            }
                            input.ReadMessage(card_);
                            break;
                        }
                }
            }
        }

        #region Nested types

        /// <summary>Container for nested types declared in the Announce message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum Type
            {
                [pbr::OriginalName("UNDEFINED")] Undefined = 0,
                [pbr::OriginalName("CARRE")] Carre = 1,
                [pbr::OriginalName("CENT")] Cent = 2,
                [pbr::OriginalName("CINQUANTE")] Cinquante = 3,
                [pbr::OriginalName("TIERCE")] Tierce = 4,
            }
        }

        #endregion Nested types
    }

    public sealed partial class Hand : pb::IMessage<Hand>
    {
        private static readonly pb::MessageParser<Hand> _parser = new pb::MessageParser<Hand>(() => new Hand());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Hand> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::CardGame.Protocol.CommunicationReflection.Descriptor.MessageTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Hand()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Hand(Hand other) : this()
        {
            card_ = other.card_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Hand Clone()
        {
            return new Hand(this);
        }

        /// <summary>Field number for the "card" field.</summary>
        public const int CardFieldNumber = 1;

        private static readonly pb::FieldCodec<global::CardGame.Protocol.Card> _repeated_card_codec
            = pb::FieldCodec.ForMessage(10, global::CardGame.Protocol.Card.Parser);

        private readonly pbc::RepeatedField<global::CardGame.Protocol.Card> card_ = new pbc::RepeatedField<global::CardGame.Protocol.Card>();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::CardGame.Protocol.Card> Card
        {
            get { return card_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Hand);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Hand other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!card_.Equals(other.card_)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= card_.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            card_.WriteTo(output, _repeated_card_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += card_.CalculateSize(_repeated_card_codec);
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Hand other)
        {
            if (other == null)
            {
                return;
            }
            card_.Add(other.card_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;

                    case 10:
                        {
                            card_.AddEntriesFrom(input, _repeated_card_codec);
                            break;
                        }
                }
            }
        }
    }

    public sealed partial class Contract : pb::IMessage<Contract>
    {
        private static readonly pb::MessageParser<Contract> _parser = new pb::MessageParser<Contract>(() => new Contract());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Contract> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::CardGame.Protocol.CommunicationReflection.Descriptor.MessageTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Contract()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Contract(Contract other) : this()
        {
            score_ = other.score_;
            type_ = other.type_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Contract Clone()
        {
            return new Contract(this);
        }

        /// <summary>Field number for the "score" field.</summary>
        public const int ScoreFieldNumber = 1;

        private uint score_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Score
        {
            get { return score_; }
            set
            {
                score_ = value;
            }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;

        private global::CardGame.Protocol.Contract.Types.Type type_ = 0;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::CardGame.Protocol.Contract.Types.Type Type
        {
            get { return type_; }
            set
            {
                type_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Contract);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Contract other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Score != other.Score) return false;
            if (Type != other.Type) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Score != 0) hash ^= Score.GetHashCode();
            if (Type != 0) hash ^= Type.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Score != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Score);
            }
            if (Type != 0)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)Type);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Score != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
            }
            if (Type != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Contract other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Score != 0)
            {
                Score = other.Score;
            }
            if (other.Type != 0)
            {
                Type = other.Type;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;

                    case 8:
                        {
                            Score = input.ReadUInt32();
                            break;
                        }
                    case 16:
                        {
                            type_ = (global::CardGame.Protocol.Contract.Types.Type)input.ReadEnum();
                            break;
                        }
                }
            }
        }

        #region Nested types

        /// <summary>Container for nested types declared in the Contract message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum Type
            {
                [pbr::OriginalName("UNDEFINED")] Undefined = 0,
                [pbr::OriginalName("DIAMONDS")] Diamonds = 1,
                [pbr::OriginalName("HEARTS")] Hearts = 2,
                [pbr::OriginalName("CLUBS")] Clubs = 3,
                [pbr::OriginalName("SPADES")] Spades = 4,
                [pbr::OriginalName("AA")] Aa = 5,
                [pbr::OriginalName("NA")] Na = 6,
            }
        }

        #endregion Nested types
    }

    public sealed partial class Event : pb::IMessage<Event>
    {
        private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Event> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::CardGame.Protocol.CommunicationReflection.Descriptor.MessageTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Event()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Event(Event other) : this()
        {
            type_ = other.type_;
            Card = other.card_ != null ? other.Card.Clone() : null;
            Contract = other.contract_ != null ? other.Contract.Clone() : null;
            Announce = other.announce_ != null ? other.Announce.Clone() : null;
            argument_ = other.argument_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Event Clone()
        {
            return new Event(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;

        private global::CardGame.Protocol.Event.Types.Type type_ = 0;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::CardGame.Protocol.Event.Types.Type Type
        {
            get { return type_; }
            set
            {
                type_ = value;
            }
        }

        /// <summary>Field number for the "card" field.</summary>
        public const int CardFieldNumber = 2;

        private global::CardGame.Protocol.Card card_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::CardGame.Protocol.Card Card
        {
            get { return card_; }
            set
            {
                card_ = value;
            }
        }

        /// <summary>Field number for the "contract" field.</summary>
        public const int ContractFieldNumber = 3;

        private global::CardGame.Protocol.Contract contract_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::CardGame.Protocol.Contract Contract
        {
            get { return contract_; }
            set
            {
                contract_ = value;
            }
        }

        /// <summary>Field number for the "announce" field.</summary>
        public const int AnnounceFieldNumber = 4;

        private global::CardGame.Protocol.Announce announce_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::CardGame.Protocol.Announce Announce
        {
            get { return announce_; }
            set
            {
                announce_ = value;
            }
        }

        /// <summary>Field number for the "argument" field.</summary>
        public const int ArgumentFieldNumber = 5;

        private static readonly pb::FieldCodec<string> _repeated_argument_codec
            = pb::FieldCodec.ForString(42);

        private readonly pbc::RepeatedField<string> argument_ = new pbc::RepeatedField<string>();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Argument
        {
            get { return argument_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Event);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Event other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Type != other.Type) return false;
            if (!object.Equals(Card, other.Card)) return false;
            if (!object.Equals(Contract, other.Contract)) return false;
            if (!object.Equals(Announce, other.Announce)) return false;
            if (!argument_.Equals(other.argument_)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Type != 0) hash ^= Type.GetHashCode();
            if (card_ != null) hash ^= Card.GetHashCode();
            if (contract_ != null) hash ^= Contract.GetHashCode();
            if (announce_ != null) hash ^= Announce.GetHashCode();
            hash ^= argument_.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Type != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Type);
            }
            if (card_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Card);
            }
            if (contract_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Contract);
            }
            if (announce_ != null)
            {
                output.WriteRawTag(34);
                output.WriteMessage(Announce);
            }
            argument_.WriteTo(output, _repeated_argument_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Type != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (card_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
            }
            if (contract_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Contract);
            }
            if (announce_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Announce);
            }
            size += argument_.CalculateSize(_repeated_argument_codec);
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Event other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Type != 0)
            {
                Type = other.Type;
            }
            if (other.card_ != null)
            {
                if (card_ == null)
                {
                    card_ = new global::CardGame.Protocol.Card();
                }
                Card.MergeFrom(other.Card);
            }
            if (other.contract_ != null)
            {
                if (contract_ == null)
                {
                    contract_ = new global::CardGame.Protocol.Contract();
                }
                Contract.MergeFrom(other.Contract);
            }
            if (other.announce_ != null)
            {
                if (announce_ == null)
                {
                    announce_ = new global::CardGame.Protocol.Announce();
                }
                Announce.MergeFrom(other.Announce);
            }
            argument_.Add(other.argument_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;

                    case 8:
                        {
                            type_ = (global::CardGame.Protocol.Event.Types.Type)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            if (card_ == null)
                            {
                                card_ = new global::CardGame.Protocol.Card();
                            }
                            input.ReadMessage(card_);
                            break;
                        }
                    case 26:
                        {
                            if (contract_ == null)
                            {
                                contract_ = new global::CardGame.Protocol.Contract();
                            }
                            input.ReadMessage(contract_);
                            break;
                        }
                    case 34:
                        {
                            if (announce_ == null)
                            {
                                announce_ = new global::CardGame.Protocol.Announce();
                            }
                            input.ReadMessage(announce_);
                            break;
                        }
                    case 42:
                        {
                            argument_.AddEntriesFrom(input, _repeated_argument_codec);
                            break;
                        }
                }
            }
        }

        #region Nested types

        /// <summary>Container for nested types declared in the Event message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum Type
            {
                [pbr::OriginalName("UNDEFINED")] Undefined = 0,
                [pbr::OriginalName("NAME")] Name = 1,
                [pbr::OriginalName("HAND")] Hand = 2,
                [pbr::OriginalName("QUIT")] Quit = 3,
                [pbr::OriginalName("CONTRACT")] Contract = 4,
                [pbr::OriginalName("PASS")] Pass = 5,
                [pbr::OriginalName("COINCHE")] Coinche = 6,
                [pbr::OriginalName("SURCOINCHE")] Surcoinche = 7,
                [pbr::OriginalName("PLAY")] Play = 8,
                [pbr::OriginalName("LAST")] Last = 9,
                [pbr::OriginalName("ANNOUNCE")] Announce = 10,
                [pbr::OriginalName("BELOTE")] Belote = 11,
                [pbr::OriginalName("REBELOTE")] Rebelote = 12,
            }
        }

        #endregion Nested types
    }

    public sealed partial class Prompt : pb::IMessage<Prompt>
    {
        private static readonly pb::MessageParser<Prompt> _parser = new pb::MessageParser<Prompt>(() => new Prompt());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Prompt> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::CardGame.Protocol.CommunicationReflection.Descriptor.MessageTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prompt()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prompt(Prompt other) : this()
        {
            toDisplay_ = other.toDisplay_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Prompt Clone()
        {
            return new Prompt(this);
        }

        /// <summary>Field number for the "to_display" field.</summary>
        public const int ToDisplayFieldNumber = 1;

        private static readonly pb::FieldCodec<string> _repeated_toDisplay_codec
            = pb::FieldCodec.ForString(10);

        private readonly pbc::RepeatedField<string> toDisplay_ = new pbc::RepeatedField<string>();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> ToDisplay
        {
            get { return toDisplay_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Prompt);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Prompt other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!toDisplay_.Equals(other.toDisplay_)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= toDisplay_.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            toDisplay_.WriteTo(output, _repeated_toDisplay_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += toDisplay_.CalculateSize(_repeated_toDisplay_codec);
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Prompt other)
        {
            if (other == null)
            {
                return;
            }
            toDisplay_.Add(other.toDisplay_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;

                    case 10:
                        {
                            toDisplay_.AddEntriesFrom(input, _repeated_toDisplay_codec);
                            break;
                        }
                }
            }
        }
    }

    public sealed partial class Reply : pb::IMessage<Reply>
    {
        private static readonly pb::MessageParser<Reply> _parser = new pb::MessageParser<Reply>(() => new Reply());

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Reply> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::CardGame.Protocol.CommunicationReflection.Descriptor.MessageTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Reply()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Reply(Reply other) : this()
        {
            number_ = other.number_;
            message_ = other.message_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Reply Clone()
        {
            return new Reply(this);
        }

        /// <summary>Field number for the "number" field.</summary>
        public const int NumberFieldNumber = 1;

        private uint number_;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Number
        {
            get { return number_; }
            set
            {
                number_ = value;
            }
        }

        /// <summary>Field number for the "message" field.</summary>
        public const int MessageFieldNumber = 2;

        private string message_ = "";

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Message
        {
            get { return message_; }
            set
            {
                message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Reply);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Reply other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Number != other.Number) return false;
            if (Message != other.Message) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Number != 0) hash ^= Number.GetHashCode();
            if (Message.Length != 0) hash ^= Message.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Number != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Number);
            }
            if (Message.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Message);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Number != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Number);
            }
            if (Message.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Reply other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Number != 0)
            {
                Number = other.Number;
            }
            if (other.Message.Length != 0)
            {
                Message = other.Message;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;

                    case 8:
                        {
                            Number = input.ReadUInt32();
                            break;
                        }
                    case 18:
                        {
                            Message = input.ReadString();
                            break;
                        }
                }
            }
        }
    }

    #endregion Messages
}

#endregion Designer generated code